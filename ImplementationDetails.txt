

Insight's Implementation.

The Native Dll, InsightAPI.dll is compiled either for x64 or x86 depending on your needs. You'll
likely want x64 bit as that will let you deal with pointers of 4 or  8 bytes.

The Sheath is what you use for in c# to work with the Native DLL. Why it's called the Sheath it that
it's intended to work with the native DLL to provide a convenient wrapper that works on top of the 
native DLL. Generally it's a thin wrapper but there are a few routines found only in the C# wrapper not found in 
the Native dll - for example WindowsUnicodeString in the C# wrapper


ALL Native routines exported in the InsightAPI DLL are WINAPI/ _stdcall export.
The native dll.  FileSandBoxApi. exports a "C" level linking for public facing classes.
Each class has a MakeInstance, CopyInstance and KillInstance exported routine to handle memory management.

There are a lot of classes and structs to work with InsightAPI; however, in general you're going to be dealing
with the classes below to Spawn, Debug, lookup process information and handle Events received from the debugger.

C# class InsightProcess

What this does:
This handles spawning processes and specifying additional telemetry/ detours DLL to spawn and if you're going
to want to debug the spawned process.  Does not currently support attaching to existing process.

Implementation:
Wrappers\InsightProcess.cs	<- contains the class wrapper for C#.
NativeImports\InsightProcessNative.cs		<- contains the DllImports from InsightApi.DLL that InsightProcess.cs uses
											<-  These are placed in an internal partial class called NativeImports.cs



Structure Native Managed Guildines
	IF simple, try using the managed marshalling			- Example API_VERSION
	If has edge cases,   export Native wrappers to deal and handle translating for Managed size on the native size.		EXAMPLE SYMBOLINFOW
	If complex, union -> export wrappers.		DEBUG_EVENT
	The big one - CONTEXT* from SetThreadContext / GetThreadContext
			This depends on the debugger state as well as the debugged state and if we can tell if target is 32 or 64 process.
			We will also need to be aware of the current TYPE of processor we are executing on AMD / Intel and if Wow is a factor.
			

		Possible workflow.
			not suitable for marshaling as the struct speneds on what target runs on
			Custom class / C level wrapper? that is a middle man between managed and native. 



A Series of routines named RemoteReadXXXX and RemoteWriteXXXX exist.
They take input a process handle, read (or write memory from the remote process) and return allocatd memory containing the 
data structurei question. Each also have an approproate RemoteFreeXXXX routine that is intended to free the allocated memory.



Exception throwing Guidlines
	On the native size	advoid if at all possible
	On the managed size - enjoy it.



		 

	